[ [ ( KeywordTok , "let" ) , ( NormalTok , " blocks = [" ) ]
, [ ( NormalTok , "  (" )
  , ( CharTok , "'B'" )
  , ( NormalTok , ", " )
  , ( CharTok , "'O'" )
  , ( NormalTok , ");  (" )
  , ( CharTok , "'X'" )
  , ( NormalTok , ", " )
  , ( CharTok , "'K'" )
  , ( NormalTok , ");  (" )
  , ( CharTok , "'D'" )
  , ( NormalTok , ", " )
  , ( CharTok , "'Q'" )
  , ( NormalTok , ");  (" )
  , ( CharTok , "'C'" )
  , ( NormalTok , ", " )
  , ( CharTok , "'P'" )
  , ( NormalTok , ");" )
  ]
, [ ( NormalTok , "  (" )
  , ( CharTok , "'N'" )
  , ( NormalTok , ", " )
  , ( CharTok , "'A'" )
  , ( NormalTok , ");  (" )
  , ( CharTok , "'G'" )
  , ( NormalTok , ", " )
  , ( CharTok , "'T'" )
  , ( NormalTok , ");  (" )
  , ( CharTok , "'R'" )
  , ( NormalTok , ", " )
  , ( CharTok , "'E'" )
  , ( NormalTok , ");  (" )
  , ( CharTok , "'T'" )
  , ( NormalTok , ", " )
  , ( CharTok , "'G'" )
  , ( NormalTok , ");" )
  ]
, [ ( NormalTok , "  (" )
  , ( CharTok , "'Q'" )
  , ( NormalTok , ", " )
  , ( CharTok , "'D'" )
  , ( NormalTok , ");  (" )
  , ( CharTok , "'F'" )
  , ( NormalTok , ", " )
  , ( CharTok , "'S'" )
  , ( NormalTok , ");  (" )
  , ( CharTok , "'J'" )
  , ( NormalTok , ", " )
  , ( CharTok , "'W'" )
  , ( NormalTok , ");  (" )
  , ( CharTok , "'H'" )
  , ( NormalTok , ", " )
  , ( CharTok , "'U'" )
  , ( NormalTok , ");" )
  ]
, [ ( NormalTok , "  (" )
  , ( CharTok , "'V'" )
  , ( NormalTok , ", " )
  , ( CharTok , "'I'" )
  , ( NormalTok , ");  (" )
  , ( CharTok , "'A'" )
  , ( NormalTok , ", " )
  , ( CharTok , "'N'" )
  , ( NormalTok , ");  (" )
  , ( CharTok , "'O'" )
  , ( NormalTok , ", " )
  , ( CharTok , "'B'" )
  , ( NormalTok , ");  (" )
  , ( CharTok , "'E'" )
  , ( NormalTok , ", " )
  , ( CharTok , "'R'" )
  , ( NormalTok , ");" )
  ]
, [ ( NormalTok , "  (" )
  , ( CharTok , "'F'" )
  , ( NormalTok , ", " )
  , ( CharTok , "'S'" )
  , ( NormalTok , ");  (" )
  , ( CharTok , "'L'" )
  , ( NormalTok , ", " )
  , ( CharTok , "'Y'" )
  , ( NormalTok , ");  (" )
  , ( CharTok , "'P'" )
  , ( NormalTok , ", " )
  , ( CharTok , "'C'" )
  , ( NormalTok , ");  (" )
  , ( CharTok , "'Z'" )
  , ( NormalTok , ", " )
  , ( CharTok , "'M'" )
  , ( NormalTok , ");" )
  ]
, [ ( NormalTok , "]" ) ]
, []
, [ ( KeywordTok , "let" )
  , ( NormalTok , " find_letter blocks c =" )
  ]
, [ ( NormalTok , "  " )
  , ( KeywordTok , "let" )
  , ( NormalTok , " found, remaining =" )
  ]
, [ ( NormalTok , "    " )
  , ( DataTypeTok , "List" )
  , ( NormalTok , ".partition (" )
  , ( KeywordTok , "fun" )
  , ( NormalTok , " (c1, c2) -> c1 = c || c2 = c) blocks" )
  ]
, [ ( NormalTok , "  " ) , ( KeywordTok , "in" ) ]
, [ ( NormalTok , "  " )
  , ( KeywordTok , "match" )
  , ( NormalTok , " found " )
  , ( KeywordTok , "with" )
  ]
, [ ( NormalTok , "  | _ :: res -> " )
  , ( DataTypeTok , "Some" )
  , ( NormalTok , " (res @ remaining)" )
  ]
, [ ( NormalTok , "  | _ -> " ) , ( DataTypeTok , "None" ) ]
, []
, [ ( KeywordTok , "let" ) , ( NormalTok , " can_make_word w =" ) ]
, [ ( NormalTok , "  " )
  , ( KeywordTok , "let" )
  , ( NormalTok , " n = " )
  , ( DataTypeTok , "String" )
  , ( NormalTok , ".length w " )
  , ( KeywordTok , "in" )
  ]
, [ ( NormalTok , "  " )
  , ( KeywordTok , "let" )
  , ( NormalTok , " " )
  , ( KeywordTok , "rec" )
  , ( NormalTok , " aux i _blocks =" )
  ]
, [ ( NormalTok , "    " )
  , ( KeywordTok , "if" )
  , ( NormalTok , " i >= n " )
  , ( KeywordTok , "then" )
  , ( NormalTok , " " )
  , ( KeywordTok , "true" )
  , ( NormalTok , " " )
  , ( KeywordTok , "else" )
  ]
, [ ( NormalTok , "      " )
  , ( KeywordTok , "match" )
  , ( NormalTok , " find_letter _blocks w.[i] " )
  , ( KeywordTok , "with" )
  ]
, [ ( NormalTok , "      | " )
  , ( DataTypeTok , "None" )
  , ( NormalTok , " -> " )
  , ( KeywordTok , "false" )
  ]
, [ ( NormalTok , "      | " )
  , ( DataTypeTok , "Some" )
  , ( NormalTok , " rem_blocks ->" )
  ]
, [ ( NormalTok , "          aux (" )
  , ( DataTypeTok , "succ" )
  , ( NormalTok , " i) rem_blocks" )
  ]
, [ ( NormalTok , "  " ) , ( KeywordTok , "in" ) ]
, [ ( NormalTok , "  aux " )
  , ( DecValTok , "0" )
  , ( NormalTok , " blocks" )
  ]
, []
, [ ( KeywordTok , "let" )
  , ( NormalTok , " test label f (word, should) =" )
  ]
, [ ( NormalTok , "  " )
  , ( DataTypeTok , "Printf" )
  , ( NormalTok , ".printf " )
  , ( StringTok , "\"- %s %S = %B  (should: %B)" )
  , ( CharTok , "\\n" )
  , ( StringTok , "\"" )
  , ( NormalTok , " label word (f word) should" )
  ]
, []
, [ ( KeywordTok , "let" ) , ( NormalTok , " () =" ) ]
, [ ( NormalTok , "  " )
  , ( DataTypeTok , "List" )
  , ( NormalTok , ".iter (test " )
  , ( StringTok , "\"can make word\"" )
  , ( NormalTok , " can_make_word) [" )
  ]
, [ ( NormalTok , "    " )
  , ( StringTok , "\"A\"" )
  , ( NormalTok , ", " )
  , ( KeywordTok , "true" )
  , ( NormalTok , ";" )
  ]
, [ ( NormalTok , "    " )
  , ( StringTok , "\"BARK\"" )
  , ( NormalTok , ", " )
  , ( KeywordTok , "true" )
  , ( NormalTok , ";" )
  ]
, [ ( NormalTok , "    " )
  , ( StringTok , "\"BOOK\"" )
  , ( NormalTok , ", " )
  , ( KeywordTok , "false" )
  , ( NormalTok , ";" )
  ]
, [ ( NormalTok , "    " )
  , ( StringTok , "\"TREAT\"" )
  , ( NormalTok , ", " )
  , ( KeywordTok , "true" )
  , ( NormalTok , ";" )
  ]
, [ ( NormalTok , "    " )
  , ( StringTok , "\"COMMON\"" )
  , ( NormalTok , ", " )
  , ( KeywordTok , "false" )
  , ( NormalTok , ";" )
  ]
, [ ( NormalTok , "    " )
  , ( StringTok , "\"SQUAD\"" )
  , ( NormalTok , ", " )
  , ( KeywordTok , "true" )
  , ( NormalTok , ";" )
  ]
, [ ( NormalTok , "    " )
  , ( StringTok , "\"CONFUSE\"" )
  , ( NormalTok , ", " )
  , ( KeywordTok , "true" )
  , ( NormalTok , ";" )
  ]
, [ ( NormalTok , "  ]" ) ]
]
